using CSV, Gadfly, Cairo, Fontconfig, Dates, Colors, FixedPointNumbers, Compose

if ispath("/moto/sscc/projects/biasedexpectations")
    root_dir = "/moto/sscc/projects/biasedexpectations"
elseif ispath("/research/hmc")
    root_dir = "/research/hmc"
else
    @error "No valid directory for root directory found"
    exit(1)
end
cd(root_dir)

t = Theme(plot_padding = [0inch])

function mycolors(rng = :)
  # generated by parse.(Colorant, ["#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"])
    return [
    RGB{N0f8}(0.0, 0.0, 0.0),      
    RGB{N0f8}(0.902, 0.624, 0.0), 
    RGB{N0f8}(0.337, 0.706, 0.914),
    RGB{N0f8}(0.0, 0.62, 0.451),  
    RGB{N0f8}(0.941, 0.894, 0.259),
    RGB{N0f8}(0.0, 0.447, 0.698),
    RGB{N0f8}(0.835, 0.369, 0.0), 
    RGB{N0f8}(0.8, 0.475, 0.655)
  ][rng]
end  


function plot_mean(df)
    xticks = range(DateTime(1980, 1), DateTime(2019, 1), step = Dates.Year(5))
    fig = plot(df, 
    layer(x = :date, y = :state_1_mean, Geom.line, Theme(default_color = mycolors(2))),
    layer(x = :date, y = :state_2_mean, Geom.line, Theme(default_color = mycolors(3))),
    layer(x = :date, y = :state_3_mean, Geom.line, Theme(default_color = mycolors(4))),
    layer(x = :date, y = :offic_inf, Geom.line, Theme(default_color = mycolors(1))),
    Guide.xlabel("Sample End Date"), 
    Guide.ylabel("State Mean"), 
    Guide.title("Means of Distributions"), 
    Coord.cartesian(xmin = Date(1980, 01), xmax = Date(2018, 03)),
    Scale.x_continuous(minvalue = Date(1980, 01), maxvalue = Date(2018, 03)),
    Guide.xticks(ticks = xticks),
    Guide.manual_color_key("Legend", append!(["Inflation "], ["State $(i)" for i in 1:3]), mycolors(1:4)),
    t)
    capttext = "Figure shows the estimated model probability of being in each state for each date in the sample, conditional on all data through\nthat date, along with the inflation rate."
    composition = compose(context(),
        (context(0.0w + 0.25inch, 0.0h + 0.25inch, 1.0w - 0.5inch, 1.0h - 1inch - 0.5inch), render(fig)),
        (context(0.0w, 1.0h - 1inch, 1.0w, 1inch), Compose.text(0.25inch, 0.0, capttext, hleft, vtop), fontsize(10pt), font("Helvetica")))
    return composition
end

function plot_std(df)
    xticks = range(DateTime(1980, 1), DateTime(2019, 1), step = Dates.Year(5))
    fig = plot(df, 
    layer(x = :date, y = :state_1_mean, Geom.line, Theme(default_color = mycolors(2))),
    layer(x = :date, y = :state_2_mean, Geom.line, Theme(default_color = mycolors(3))),
    layer(x = :date, y = :state_3_mean, Geom.line, Theme(default_color = mycolors(4))),
    Guide.xlabel("Sample End Date"), 
    Guide.ylabel("State Std."), 
    Guide.title("Std. of Distributions"), 
    Coord.cartesian(xmin = Date(1980, 01), xmax = Date(2018, 03)),
    Guide.xticks(ticks = xticks),
    Guide.manual_color_key("Legend", ["State $(i)" for i in 1:3], mycolors(2:4)),
    t)
    capttext = "Figure shows the estimated standard deviation of inflation conditional on being in each state, estimated conditional all data\nthrough each date."
    composition = compose(context(),
        (context(0.0w + 0.25inch, 0.0h + 0.25inch, 1.0w - 0.5inch, 1.0h - 1inch - 0.5inch), render(fig)),
        (context(0.0w, 1.0h - 1inch, 1.0w, 1inch), Compose.text(0.25inch, 0.0, capttext, hleft, vtop), fontsize(10pt), font("Helvetica")))
    return composition
end

function plot_forecast(df)
    xticks = range(DateTime(1980, 1), DateTime(2019, 1), step = Dates.Year(5))
    fig = plot(df, 
    layer(x = :date, y = :forecast_12_mean, Geom.line, Theme(default_color = mycolors(2))),
    layer(x = :date, y = :offic_inf, Geom.line, Theme(default_color = mycolors(1))),
    Guide.xlabel("Sample End Date"), 
    Guide.ylabel("Forecast"), 
    Guide.title("12-Month Ahead Forecasts"), 
    Coord.cartesian(xmin = Date(1980, 01), xmax = Date(2018, 03)),
    Guide.xticks(ticks = xticks),
    Guide.manual_color_key("Legend", ["Forecast", "Inflation"], mycolors([2,1])),
    t)
    capttext = "Figure shows the 12-month ahead forecast estimated using data through each date, along with the inflation rate."
    composition = compose(context(),
        (context(0.0w + 0.25inch, 0.0h + 0.25inch, 1.0w - 0.5inch, 1.0h - 1inch - 0.5inch), render(fig)),
        (context(0.0w, 1.0h - 1inch, 1.0w, 1inch), Compose.text(0.25inch, 0.0, capttext, hleft, vtop), fontsize(10pt), font("Helvetica")))
    return composition
end

function plot_forecast_error(df)
    xticks = range(DateTime(1980, 1), DateTime(2019, 1), step = Dates.Year(5))
    fig = plot(df, 
    layer(x = :date, y = :forecast_12_mean, Geom.line, Theme(default_color = mycolors(2))),
    layer(x = :date, y = :offic_inf_lead, Geom.line, Theme(default_color = mycolors(1))),
    Guide.xlabel("Sample End Date"), 
    Guide.ylabel("Forecast"), 
    Guide.title("12-Month Ahead Forecasts and Realized Inflation"), 
    Coord.cartesian(xmin = Date(1980, 01), xmax = Date(2018, 03)),
    Guide.xticks(ticks = xticks),
    Guide.manual_color_key("Legend", ["Forecast", "Realized Inflation"], mycolors([2,1])),
    t)
    capttext = "Figure shows the 12-month ahead forecast estimated using data through each date, along with the realized 12-month ahead\ninflation rate."
    composition = compose(context(),
        (context(0.0w + 0.25inch, 0.0h + 0.25inch, 1.0w - 0.5inch, 1.0h - 1inch - 0.5inch), render(fig)),
        (context(0.0w, 1.0h - 1inch, 1.0w, 1inch), Compose.text(0.25inch, 0.0, capttext, hleft, vtop), fontsize(10pt), font("Helvetica")))
    return composition
end


function plot_state_probs(df)
    xticks = range(DateTime(1980, 1), DateTime(2019, 1), step = Dates.Year(5))
    fig = plot(df, 
    layer(x = :date, y = :state_1_mean, Geom.step, Theme(default_color = mycolors(2))),
    layer(x = :date, y = :state_2_mean, Geom.step, Theme(default_color = mycolors(3))),
    layer(x = :date, y = :state_3_mean, Geom.step, Theme(default_color = mycolors(4))),
    Guide.xlabel("Sample End Date"), 
    Guide.ylabel("State Probabilities"), 
    Guide.title("State Probabilities at Sample End Date"), 
    Coord.cartesian(xmin = Date(1980, 01), xmax = Date(2018, 03)),
    Guide.xticks(ticks = xticks),
    Guide.manual_color_key("Legend", ["State $(i)" for i in 1:3], mycolors(2:4)),
    t)
    capttext = "Figure shows the estimated probability of being in each state at a given date, estimated conditional all data through each date"
    composition = compose(context(),
        (context(0.0w + 0.25inch, 0.0h + 0.25inch, 1.0w - 0.5inch, 1.0h - 1inch - 0.5inch), render(fig)),
        (context(0.0w, 1.0h - 1inch, 1.0w, 1inch), Compose.text(0.25inch, 0.0, capttext, hleft, vtop), fontsize(10pt), font("Helvetica")))
    return composition
end


function make_plots(fname, dfs)
    s = Cairo.CairoPDFSurface(fname, 612, 792); #612 by 792 is size of letter paper in points
    c = Cairo.CairoContext(s)
    b = Compose.CAIROSURFACE(s)
    draw(b, plot_mean(dfs[1]))
    Cairo.show_page(c)
    b = Compose.CAIROSURFACE(s)
    draw(b, plot_std(dfs[2]))
    Cairo.show_page(c)
    b = Compose.CAIROSURFACE(s)
    draw(b, plot_forecast(dfs[4]))
    Cairo.show_page(c)
    b = Compose.CAIROSURFACE(s)
    draw(b, plot_forecast_error(dfs[4]))
    Cairo.show_page(c)
    b = Compose.CAIROSURFACE(s)
    draw(b, plot_state_probs(dfs[3]))
    Cairo.finish(s)
end

function read_dfs(p; dispersion = false)
    if ispath("/moto/sscc/projects/biasedexpectations")
        root_dir = "/moto/sscc/projects/biasedexpectations"
    elseif ispath("/research/hmc")
        root_dir = "/research/hmc"
    end
    if dispersion
        df1 = CSV.read(joinpath(p, "filtered_means_dispersion.csv"), copycols = true)
        df2 = CSV.read(joinpath(p, "filtered_variances_dispersion.csv"), copycols = true)
        df3 = CSV.read(joinpath(p, "filtered_state_probs_dispersion.csv"), copycols = true)
        df4 = CSV.read(joinpath(p, "forecasts_dispersion.csv"), copycols = true)
        df5 = CSV.read(joinpath(root_dir, "data/processed/inflation.csv"))
        df5[!,:offic_inf_lead] = Array{Union{Missing,Float64}}(missing, size(df5, 1))
        df5[1:end - 12, :offic_inf_lead] = df5[13:end, :offic_inf] 
        df1 = join(df1, df5, on = :date, kind = :left)
        df2 = join(df2, df5, on = :date, kind = :left)
        df3 = join(df3, df5, on = :date, kind = :left)
        df4 = join(df4, df5, on = :date, kind = :left)
        df2[:,[:state_1_mean, :state_2_mean, :state_3_mean]] .= sqrt.(df2[:,[:state_1_mean, :state_2_mean, :state_3_mean]])
    else
        df1 = CSV.read(joinpath(p, "filtered_means_summary.csv"), copycols = true)
        df2 = CSV.read(joinpath(p, "filtered_variances_summary.csv"), copycols = true)
        df3 = CSV.read(joinpath(p, "filtered_state_probs_summary.csv"), copycols = true)
        df4 = CSV.read(joinpath(p, "forecasts_summary.csv"), copycols = true)
        df5 = CSV.read(joinpath(root_dir, "data/processed/inflation.csv"))
        df5[!,:offic_inf_lead] = Array{Union{Missing,Float64}}(missing, size(df5, 1))
        df5[1:end - 12, :offic_inf_lead] = df5[13:end, :offic_inf] 
        df1 = join(df1, df5, on = :date, kind = :left)
        df2 = join(df2, df5, on = :date, kind = :left)
        df3 = join(df3, df5, on = :date, kind = :left)
        df4 = join(df4, df5, on = :date, kind = :left)
        df2[:,[:state_1_mean, :state_2_mean, :state_3_mean]] .= sqrt.(df2[:,[:state_1_mean, :state_2_mean, :state_3_mean]]) 
    end
    return [df1, df2, df3, df4]
end

p = joinpath(root_dir, "data/output/official")
make_plots(joinpath(root_dir, "plots/output/official.pdf"), read_dfs(p; dispersion = false))
p = joinpath(root_dir, "data/output/signals_official_noise_0.1_allsignal")
make_plots(joinpath(root_dir, "plots/output/official_noise_0.1_allsignal.pdf"), read_dfs(p; dispersion = true))
p = joinpath(root_dir, "data/output/signals_official_noise_0.3_allsignal")
make_plots(joinpath(root_dir, "plots/output/official_noise_0.3_allsignal.pdf"), read_dfs(p; dispersion = true))
p = joinpath(root_dir, "data/output/signals_official_noise_0.6_allsignal")
make_plots(joinpath(root_dir, "plots/output/official_noise_0.6_allsignal.pdf"), read_dfs(p; dispersion = true))